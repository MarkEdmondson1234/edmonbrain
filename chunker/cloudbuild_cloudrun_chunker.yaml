substitutions:
  _IMAGE_NAME: your-image-name
  _SERVICE_NAME: edmonbrain-chunker
  _REGION: your-region
  _GCS_BUCKET: your-gcs-bucket
  _SERVICE_ACCOUNT: your-service@your-project.iam.gserviceaccount.com
  _CONFIG_FILE: config.json

steps:
  - name: 'gcr.io/cloud-builders/gsutil'
    id: download config file
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gsutil cp ${_GCS_BUCKET}/${_CONFIG_FILE} ${_CONFIG_FILE}
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      cat <<EOF >Dockerfile_cloudrun
      FROM gcr.io/$PROJECT_ID/prebuild/${_IMAGE_NAME}

      COPY . .

      RUN pip install --no-cache-dir -r qna/requirements.txt

      EXPOSE 8080
      ENV GCS_BUCKET=${_GCS_BUCKET}
      ENV UNSTRUCTURED_PARALLEL_MODE_ENABLED=true

      RUN python -c "from transformers import AutoModel, AutoTokenizer; AutoTokenizer.from_pretrained('bert-base-uncased'); AutoModel.from_pretrained('bert-base-uncased')"
      RUN python -c "from transformers import GPT2TokenizerFast; GPT2TokenizerFast.from_pretrained('gpt2')"

      CMD exec gunicorn --bind :\$$PORT --workers 4 --timeout 0 chunker.app:app
      EOF

  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}/chunker', '-f', 'Dockerfile_cloudrun', '.']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}/chunker']

  # Deploy the image to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy cloud run
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud run deploy ${_SERVICE_NAME} --image gcr.io/$PROJECT_ID/${_IMAGE_NAME}/chunker \
           --region ${_REGION} \
           --platform managed \
           --allow-unauthenticated \
           --memory 2Gi \
           --cpu 1 \
           --min-instances 0 \
           --max-instances 6 \
           --service-account ${_SERVICE_ACCOUNT} \
           --update-secrets=GIT_PAT=gitpython_PAT:latest \
           --update-secrets=UNSTRUCTURED_KEY=UNSTRCUTURED_KEY:latest \
           --update-secrets=SUPABASE_URL=SUPABASE_URL:latest \
           --update-secrets=SUPABASE_KEY=SUPABASE_KEY:latest \
           --update-secrets=OPENAI_API_KEY=OPENAI_API_KEY:latest \
           --update-secrets=DB_CONNECTION_STRING=DB_CONNECTION_STRING:latest \
           --update-secrets=LANGCHAIN_API_KEY=LANGCHAIN_API_KEY:latest \
           --timeout=25m

  # Get service URL
  - name: "gcr.io/cloud-builders/gcloud"
    id: get service url for qna
    entrypoint: bash
    args:
      - "-c"
      - |
        echo $(gcloud run services describe edmonbrain-embedder --region ${_REGION} --format 'value(status.url)') \
          > service_urlqna.txt && cat service_urlqna.txt

  # Update the service with SERVICE_URL environment variable
  - name: "gcr.io/cloud-builders/gcloud"
    id: update service qna
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud run services update ${_SERVICE_NAME} --region ${_REGION} \
          --update-env-vars=EMBED_URL=$(cat service_urlqna.txt)

  # Get service URL
  - name: "gcr.io/cloud-builders/gcloud"
    id: get service url
    entrypoint: bash
    args:
      - "-c"
      - |
        echo $(gcloud run services describe ${_SERVICE_NAME} --region ${_REGION} --format 'value(status.url)') \
          > service_url.txt && cat service_url.txt

  # Update the service with SERVICE_URL environment variable
  - name: "gcr.io/cloud-builders/gcloud"
    id: update service
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud run services update ${_SERVICE_NAME} --region ${_REGION} \
          --update-env-vars=QNA_URL=$(cat service_url.txt)


